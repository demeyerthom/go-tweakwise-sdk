/*
Tweakwise Navigator Backend API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend

import (
	"encoding/json"
)

// UserInstance Link from user to instance
type UserInstance struct {
	// Instance key
	InstanceKey *string `json:"InstanceKey,omitempty"`
	// Instance name
	InstanceName *string `json:"InstanceName,omitempty"`
}

// NewUserInstance instantiates a new UserInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInstance() *UserInstance {
	this := UserInstance{}
	return &this
}

// NewUserInstanceWithDefaults instantiates a new UserInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInstanceWithDefaults() *UserInstance {
	this := UserInstance{}
	return &this
}

// GetInstanceKey returns the InstanceKey field value if set, zero value otherwise.
func (o *UserInstance) GetInstanceKey() string {
	if o == nil || o.InstanceKey == nil {
		var ret string
		return ret
	}
	return *o.InstanceKey
}

// GetInstanceKeyOk returns a tuple with the InstanceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInstance) GetInstanceKeyOk() (*string, bool) {
	if o == nil || o.InstanceKey == nil {
		return nil, false
	}
	return o.InstanceKey, true
}

// HasInstanceKey returns a boolean if a field has been set.
func (o *UserInstance) HasInstanceKey() bool {
	if o != nil && o.InstanceKey != nil {
		return true
	}

	return false
}

// SetInstanceKey gets a reference to the given string and assigns it to the InstanceKey field.
func (o *UserInstance) SetInstanceKey(v string) {
	o.InstanceKey = &v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *UserInstance) GetInstanceName() string {
	if o == nil || o.InstanceName == nil {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInstance) GetInstanceNameOk() (*string, bool) {
	if o == nil || o.InstanceName == nil {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *UserInstance) HasInstanceName() bool {
	if o != nil && o.InstanceName != nil {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *UserInstance) SetInstanceName(v string) {
	o.InstanceName = &v
}

func (o UserInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceKey != nil {
		toSerialize["InstanceKey"] = o.InstanceKey
	}
	if o.InstanceName != nil {
		toSerialize["InstanceName"] = o.InstanceName
	}
	return json.Marshal(toSerialize)
}

type NullableUserInstance struct {
	value *UserInstance
	isSet bool
}

func (v NullableUserInstance) Get() *UserInstance {
	return v.value
}

func (v *NullableUserInstance) Set(val *UserInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInstance(val *UserInstance) *NullableUserInstance {
	return &NullableUserInstance{value: val, isSet: true}
}

func (v NullableUserInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


