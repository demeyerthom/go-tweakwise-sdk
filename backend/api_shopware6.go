/*
Tweakwise Navigator Backend API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type Shopware6Api interface {

	/*
	Shopware6Channels Get sales channels by shop

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiShopware6ChannelsRequest
	*/
	Shopware6Channels(ctx _context.Context) ApiShopware6ChannelsRequest

	// Shopware6ChannelsExecute executes the request
	//  @return []SalesChannel
	Shopware6ChannelsExecute(r ApiShopware6ChannelsRequest) ([]SalesChannel, *_nethttp.Response, error)

	/*
	Shopware6CheckConnection Check whether a connection exists for this shopId

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiShopware6CheckConnectionRequest
	*/
	Shopware6CheckConnection(ctx _context.Context) ApiShopware6CheckConnectionRequest

	// Shopware6CheckConnectionExecute executes the request
	//  @return map[string]interface{}
	Shopware6CheckConnectionExecute(r ApiShopware6CheckConnectionRequest) (map[string]interface{}, *_nethttp.Response, error)

	/*
	Shopware6Connect Connects Shopware6 store to the Tweakwise Instance

	Schedules a full sync of the Shopware6 store into Tweakwise.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiShopware6ConnectRequest
	*/
	Shopware6Connect(ctx _context.Context) ApiShopware6ConnectRequest

	// Shopware6ConnectExecute executes the request
	Shopware6ConnectExecute(r ApiShopware6ConnectRequest) (*_nethttp.Response, error)

	/*
	Shopware6GetActiveChannels Returns an active channelID

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiShopware6GetActiveChannelsRequest
	*/
	Shopware6GetActiveChannels(ctx _context.Context) ApiShopware6GetActiveChannelsRequest

	// Shopware6GetActiveChannelsExecute executes the request
	Shopware6GetActiveChannelsExecute(r ApiShopware6GetActiveChannelsRequest) (*_nethttp.Response, error)

	/*
	Shopware6ScheduleFullSync Schedules a full sync of the Shopware6 store into Tweakwise

	Schedules a full sync of the Shopware6 store into Tweakwise.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiShopware6ScheduleFullSyncRequest
	*/
	Shopware6ScheduleFullSync(ctx _context.Context) ApiShopware6ScheduleFullSyncRequest

	// Shopware6ScheduleFullSyncExecute executes the request
	Shopware6ScheduleFullSyncExecute(r ApiShopware6ScheduleFullSyncRequest) (*_nethttp.Response, error)

	/*
	Shopware6UpdateActiveChannels Updates an active channelID

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiShopware6UpdateActiveChannelsRequest
	*/
	Shopware6UpdateActiveChannels(ctx _context.Context) ApiShopware6UpdateActiveChannelsRequest

	// Shopware6UpdateActiveChannelsExecute executes the request
	Shopware6UpdateActiveChannelsExecute(r ApiShopware6UpdateActiveChannelsRequest) (*_nethttp.Response, error)
}

// Shopware6ApiService Shopware6Api service
type Shopware6ApiService service

type ApiShopware6ChannelsRequest struct {
	ctx _context.Context
	ApiService Shopware6Api
	shopId *string
}

// Shopware shop id the sales channels need to be provided for
func (r ApiShopware6ChannelsRequest) ShopId(shopId string) ApiShopware6ChannelsRequest {
	r.shopId = &shopId
	return r
}

func (r ApiShopware6ChannelsRequest) Execute() ([]SalesChannel, *_nethttp.Response, error) {
	return r.ApiService.Shopware6ChannelsExecute(r)
}

/*
Shopware6Channels Get sales channels by shop

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiShopware6ChannelsRequest
*/
func (a *Shopware6ApiService) Shopware6Channels(ctx _context.Context) ApiShopware6ChannelsRequest {
	return ApiShopware6ChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SalesChannel
func (a *Shopware6ApiService) Shopware6ChannelsExecute(r ApiShopware6ChannelsRequest) ([]SalesChannel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SalesChannel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Shopware6ApiService.Shopware6Channels")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shopware6/channels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.shopId == nil {
		return localVarReturnValue, nil, reportError("shopId is required and must be specified")
	}

	localVarQueryParams.Add("shopId", parameterToString(*r.shopId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiShopware6CheckConnectionRequest struct {
	ctx _context.Context
	ApiService Shopware6Api
	shopId *string
}

func (r ApiShopware6CheckConnectionRequest) ShopId(shopId string) ApiShopware6CheckConnectionRequest {
	r.shopId = &shopId
	return r
}

func (r ApiShopware6CheckConnectionRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.Shopware6CheckConnectionExecute(r)
}

/*
Shopware6CheckConnection Check whether a connection exists for this shopId

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiShopware6CheckConnectionRequest
*/
func (a *Shopware6ApiService) Shopware6CheckConnection(ctx _context.Context) ApiShopware6CheckConnectionRequest {
	return ApiShopware6CheckConnectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *Shopware6ApiService) Shopware6CheckConnectionExecute(r ApiShopware6CheckConnectionRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Shopware6ApiService.Shopware6CheckConnection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shopware6/check-connection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.shopId == nil {
		return localVarReturnValue, nil, reportError("shopId is required and must be specified")
	}

	localVarQueryParams.Add("shopId", parameterToString(*r.shopId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiShopware6ConnectRequest struct {
	ctx _context.Context
	ApiService Shopware6Api
	model *ConnectModel
}

func (r ApiShopware6ConnectRequest) Model(model ConnectModel) ApiShopware6ConnectRequest {
	r.model = &model
	return r
}

func (r ApiShopware6ConnectRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.Shopware6ConnectExecute(r)
}

/*
Shopware6Connect Connects Shopware6 store to the Tweakwise Instance

Schedules a full sync of the Shopware6 store into Tweakwise.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiShopware6ConnectRequest
*/
func (a *Shopware6ApiService) Shopware6Connect(ctx _context.Context) ApiShopware6ConnectRequest {
	return ApiShopware6ConnectRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *Shopware6ApiService) Shopware6ConnectExecute(r ApiShopware6ConnectRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Shopware6ApiService.Shopware6Connect")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shopware6/connect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiShopware6GetActiveChannelsRequest struct {
	ctx _context.Context
	ApiService Shopware6Api
	shopId *string
}

func (r ApiShopware6GetActiveChannelsRequest) ShopId(shopId string) ApiShopware6GetActiveChannelsRequest {
	r.shopId = &shopId
	return r
}

func (r ApiShopware6GetActiveChannelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.Shopware6GetActiveChannelsExecute(r)
}

/*
Shopware6GetActiveChannels Returns an active channelID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiShopware6GetActiveChannelsRequest
*/
func (a *Shopware6ApiService) Shopware6GetActiveChannels(ctx _context.Context) ApiShopware6GetActiveChannelsRequest {
	return ApiShopware6GetActiveChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *Shopware6ApiService) Shopware6GetActiveChannelsExecute(r ApiShopware6GetActiveChannelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Shopware6ApiService.Shopware6GetActiveChannels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shopware6/active-channel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.shopId == nil {
		return nil, reportError("shopId is required and must be specified")
	}

	localVarQueryParams.Add("shopId", parameterToString(*r.shopId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiShopware6ScheduleFullSyncRequest struct {
	ctx _context.Context
	ApiService Shopware6Api
}


func (r ApiShopware6ScheduleFullSyncRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.Shopware6ScheduleFullSyncExecute(r)
}

/*
Shopware6ScheduleFullSync Schedules a full sync of the Shopware6 store into Tweakwise

Schedules a full sync of the Shopware6 store into Tweakwise.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiShopware6ScheduleFullSyncRequest
*/
func (a *Shopware6ApiService) Shopware6ScheduleFullSync(ctx _context.Context) ApiShopware6ScheduleFullSyncRequest {
	return ApiShopware6ScheduleFullSyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *Shopware6ApiService) Shopware6ScheduleFullSyncExecute(r ApiShopware6ScheduleFullSyncRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Shopware6ApiService.Shopware6ScheduleFullSync")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shopware6/schedule-full-sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyDefinition"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["TWN-Authentication"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["instanceKeyDefinition"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["TWN-InstanceKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiShopware6UpdateActiveChannelsRequest struct {
	ctx _context.Context
	ApiService Shopware6Api
	shopId *string
	model *ActiveChannelModel
}

func (r ApiShopware6UpdateActiveChannelsRequest) ShopId(shopId string) ApiShopware6UpdateActiveChannelsRequest {
	r.shopId = &shopId
	return r
}
func (r ApiShopware6UpdateActiveChannelsRequest) Model(model ActiveChannelModel) ApiShopware6UpdateActiveChannelsRequest {
	r.model = &model
	return r
}

func (r ApiShopware6UpdateActiveChannelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.Shopware6UpdateActiveChannelsExecute(r)
}

/*
Shopware6UpdateActiveChannels Updates an active channelID

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiShopware6UpdateActiveChannelsRequest
*/
func (a *Shopware6ApiService) Shopware6UpdateActiveChannels(ctx _context.Context) ApiShopware6UpdateActiveChannelsRequest {
	return ApiShopware6UpdateActiveChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *Shopware6ApiService) Shopware6UpdateActiveChannelsExecute(r ApiShopware6UpdateActiveChannelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Shopware6ApiService.Shopware6UpdateActiveChannels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shopware6/active-channel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.shopId == nil {
		return nil, reportError("shopId is required and must be specified")
	}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	localVarQueryParams.Add("shopId", parameterToString(*r.shopId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
